#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var utils = require('./cli-utils');
program = utils.configureCommander(program);

program
  .usage('[options] <file>')
  .option('-o, --output <filename>', 'write signatures to file')
  .parse(process.argv);

var args = program.args;
if (!args[0])
  program.help();

var file = args[0];

utils.getClient(program, { mustExist: true, doNotComplete: true }, function (client) {
  var task = JSON.parse(fs.readFileSync(file));
  var errors = [];
  var signatures = task.txps.map((txp) => {
    try {
      return {
        txpId: txp.id,
        signatures: client.signTxProposalFromAirGapped(txp, task.encryptedPkr, task.m, task.n),
      };
    } catch (ex) {
      errors.push({
        txp: txp,
        error: ex
      });
    }
  });
  if (errors.length == 0) {
    if (program.output) {
      fs.writeFileSync(program.output, JSON.stringify(signatures));
      console.log('Signatures written to file.');
    } else {
      console.log(JSON.stringify(signatures));
    }
  } else {
    console.log('Error signing transactions:');
    errors.forEach((e) => {
      console.log('\tTransaction %s: %s', e.txp.id, e.error.message);
    });
  }
});
