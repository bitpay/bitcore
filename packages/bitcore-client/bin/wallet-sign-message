#!/usr/bin/env node

'use strict';

const program = require('commander');
const { Wallet } = require('../ts_build/src/wallet');
const promptly = require('promptly');
const { BitcoreLib } = require('crypto-wallet-core');

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>', 'REQUIRED - Wallet Name')
  .requiredOption('--index <index>', 'REQUIRED - Address index to sign message with')
  .requiredOption('--message <message>', 'REQUIRED - message to be signed')
  .option('--change', 'optional - If the address is a change address')
  .option('--storageType <storageType>', 'optional - Name of the database to use (default Level)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

let wallet;

const main = async () => {
  const { name, path, index, message, change, storageType } = program.opts();
  try {
    const password = await promptly.password('Wallet Password:');
    wallet = await Wallet.loadWallet({ name, path, storageType });
    wallet = await wallet.unlock(password);

    const privateKey = await wallet.derivePrivateKey(change, index);
    let signature;
    let address;
    if (wallet.chain === 'SOL') {
      signature = await wallet.solSignMessage(privateKey.privKey, message);
      address = wallet.deriveAddress(0, change);
    } else {
      const bitcoreMessage = new BitcoreLib.Message(message);
      const bitcorePrivateKey = new BitcoreLib.PrivateKey(privateKey.privKey);
      signature = bitcoreMessage.sign(bitcorePrivateKey);
      address = wallet.deriveAddress(index, change);
    }

    console.log({
      address,
      message,
      signature
    });

  } catch (e) {
    console.error(e);
  }
};

main()
  .catch(console.error)
  .finally(() => wallet?.storage?.close());
