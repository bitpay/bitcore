#!/usr/bin/env node

const bitcoreLib = require('bitcore-lib');
const program = require('commander');
const Wallet = require('../lib/wallet');
const promptly = require('promptly');

program
  .version(require('../package.json').version)
  .option('--path <path>', 'REQUIRED - Filepath where wallet is stored')
  .option('--gap <gap>', 'REQUIRED - Number of addresses to derive (will derive that many change addresses too)')
  .option('--change <change>', 'REQUIRED - should derive change addresses')
  .parse(process.argv);

function derivePrivateKey(addressIndex, isChange, key) {
  const changeNum = isChange ? 1 : 0;
  const path = `m/${changeNum}/${addressIndex}`;
  return key.derive(path);
}

const main = async () => {
  const { path, gap, change } = program;
  let wallet;
  try {
    const password = await promptly.password('Wallet Password:');
    wallet = await Wallet.loadWallet({ path });
    wallet = await wallet.unlock(password);

    const { chain, network } = wallet;
    let unusedAddressCounter = 0;

    let index = wallet.addressIndex || 0;

    if (change) {
      index = wallet.changeAddressIndex || 0;
    }

    const xprivkey = wallet.unlocked.masterKey.xprivkey;
    const HDPrivateKey = new bitcoreLib.HDPrivateKey(xprivkey);

    while (unusedAddressCounter < gap) {
      const derived = derivePrivateKey(index, change, HDPrivateKey);
      const privKey = derived.privateKey.toString();
      const address = derived.privateKey.toAddress(network).toString();
      await wallet.importKeys({ keys: [{ privKey, address }] });

      const hasTransactions = await wallet.client.getAddressTxos({ address });

      if (hasTransactions.length === 0) {
        unusedAddressCounter++;
      } else {
        unusedAddressCounter = 0;
      }
      index++;
      if (change) {
        wallet.changeAddressIndex = index;
        console.log('Current change index: ', index);
      } else {
        wallet.addressIndex = index;
        console.log('Current address index: ', index);
      }
    }
    wallet.saveWallet();
  } catch (e) {
    console.error(e);
  }
};

main();
