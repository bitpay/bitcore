#!/usr/bin/env node

const program = require('../ts_build/program');
const { Wallet } = require('../ts_build/wallet');
const promptly = require('promptly');

program
  .version(require('../package.json').version)
  .option('--name <name>', 'REQUIRED - Wallet Name')
  .option('--gap [gap]', 'optional - Number of addresses to derive (will derive that many change addresses too)')
  .option('--change [change]', 'optional - should derive change addresses')
  .option('--path [path]', 'optional - Custom wallet storage path')
  .option('--useBech32 [useBech32]', 'optional - use Segwit address')
  .parse(process.argv);

const main = async () => {
  const { name, path, gap=20, change=false, useBech32 } = program;
  let wallet;
  try {
    const password = await promptly.password('Wallet Password:');
    wallet = await Wallet.loadWallet({ name, path });
    wallet = await wallet.unlock(password);

    let unusedAddressCounter = 0;

    let index = wallet.addressIndex || 0;

    while (unusedAddressCounter < gap) {
      const address = await wallet.nextAddressPair({ isChange: change, useBech32 });

      const hasTransactions = await wallet.client.getAddressTxos({ address });

      if (!hasTransactions.length) {
        unusedAddressCounter++;
      } else {
        unusedAddressCounter = 0;
      }
      if (change) {
        console.log(`Current change index: ${index}: ${address}`);
      } else {
        console.log(`Current address index: ${index}: ${address}`);
      }
      index++;
    }
  } catch (e) {
    console.error(e);
  }
};

main();
