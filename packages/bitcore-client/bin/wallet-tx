#!/usr/bin/env node

const program = require('commander');
const { Wallet } = require('../ts_build/src/wallet');

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>', 'REQUIRED - Wallet Name')
  .requiredOption('--recipients <recipients>', 'REQUIRED - JSON array \'[{"address": "abc1234", "amount": xxxxxx}]\'')
  .requiredOption('--utxos <utxos>', 'REQUIRED - Unspent transactions that can be spent')
  .requiredOption('--change <change>', 'REQUIRED - Change address. `miner` will ensure there is no change output and all left-overs go towards the miner fee.')
  .option('--fee <fee>', 'optional - Custom transaction fee to pay')
  .option('--target <target>', 'optional - Custom target block for confirmation')
  .option('--from <from>', 'optional - From address')
  .option('--nonce <nonce>', 'optional - Nonce')
  .option('--invoiceID <invoiceID>', 'optional - InvoiceId for XRP transactions')
  .option('--token <currency>', 'optional - ERC20 token symbol')
  .option('--tokenName <currency>', 'optional - ERC20 token custom name')
  .option('--storageType <storageType>', 'optional - Name of the database to use (default Level)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

let wallet;

const main = async () => {
  const { name, path, storageType } = program.opts();
  let totalTransactionFee;
  let walletNonce;
  try {
    const { recipients, utxos, change, fee, target, from, nonce, invoiceID, token, tokenName } = program.opts();
    wallet = await Wallet.loadWallet({ name, path, storageType });

    function tryParse(json) {
      try {
        return JSON.parse(json);
      } catch (e) {
        return;
      }
    }

    const parsedUtxos = tryParse(utxos) || [];
    const parsedRecipients = tryParse(recipients) || [];
    if (!parsedRecipients.length) {
      throw new Error('invalid --recipients');
    }

    if (!parsedUtxos.length) {
      throw new Error('invalid --utxos');
    }

    if (!change) {
      throw new Error('invalid --change');
    }

    if (!fee) {
      const utxoBytes = 148;
      const outputBytes = 34;
      const transactionHeader = 10;
      const calculatedNetworkFeeKb = await wallet.getNetworkFee({ target });
      const netWorkFeeSat = calculatedNetworkFeeKb.feerate * 1E8/1000;
      const transactionSize = (parsedUtxos.length * utxoBytes + parsedRecipients.length * outputBytes + transactionHeader + parsedUtxos.length);
      totalTransactionFee = transactionSize * netWorkFeeSat;
    }
    if (!nonce) {
      walletNonce = await wallet.getNonce();
    }

    if (change !== 'miner') {
      const allKnownAddresses = await wallet.getAddresses();
      if (!allKnownAddresses.includes(change)) {
        throw new Error('This wallet will not be able to detect change funds sent to the --change address you specified. Try importing the key/address first.');
      }
    }

    let params = { recipients, utxos, change, fee, from, nonce, token, tokenName };
    params.fee = Number(fee) || totalTransactionFee;
    params.nonce = Number(nonce) || walletNonce;
    params.recipients = parsedRecipients;
    params.utxos = parsedUtxos;
    params.invoiceID = invoiceID;
    const tx = await wallet.newTx(params);

    console.log(JSON.stringify({ rawTx: tx }));
  } catch (e) {
    console.error(e);
  }
};


main()
  .catch(console.error)
  .finally(() => wallet?.storage?.close());
