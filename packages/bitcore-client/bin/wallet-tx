#!/usr/bin/env node

const program = require('../ts_build/program');
const { Wallet } = require('../ts_build/wallet');

program
  .version(require('../package.json').version)
  .option('--name <name>', 'REQUIRED - Wallet Name')
  .option(
    '--recipients <recipients>',
    'REQUIRED - JSON array \'[{"address": "abc1234", "amount": xxxxxx}]\''
  )
  .option('--utxos <utxos>', 'REQUIRED - Unspent transactions that can be spent')
  .option('--change <change>', 'REQUIRED - Change addresses')
  .option('--fee [fee]', 'optional - custom transaction fee to pay')
  .option('--target [target]', 'optional - custom target block for confirmation')
  .option('--path [path]', 'optional - Custom wallet storage path')
  .parse(process.argv);

const main = async () => {
  const { name, path } = program;
  let wallet;
  try {
    const { recipients, utxos, change, fee, target } = program;
    wallet = await Wallet.loadWallet({ name, path });

    const parsedUtxos = utxos.includes('[') ? JSON.parse(utxos) : [];
    const parsedRecipients = recipients.includes('[') ? JSON.parse(recipients) : [];

    if (!parsedRecipients.length || !parsedUtxos.length) {
      throw new Error('invalid arguments');
    }

    const utxoBytes = 148;
    const outputBytes = 34;
    const transactionHeader = 10;
    const calculatedNetworkFeeKb = await wallet.getNetworkFee({ target });
    const netWorkFeeSat = calculatedNetworkFeeKb.feerate * 1E8/1000;

    const transactionSize = (parsedUtxos.length * utxoBytes + parsedRecipients.length * outputBytes + transactionHeader + parsedUtxos.length);
    const totalTransactionFee = transactionSize * netWorkFeeSat;

    let params = { recipients, utxos, change, fee };
    params.fee = Number(fee) || totalTransactionFee;
    params.recipients = parsedRecipients;
    params.utxos = parsedUtxos;
    const tx = await wallet.newTx(params);

    console.log(
      JSON.stringify({
        rawTx: tx
      })
    );
  } catch (e) {
    console.error(e);
  }
};

main();
