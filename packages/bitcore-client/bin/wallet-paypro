#!/usr/bin/env node

const program = require('commander');
const { Wallet } = require('../ts_build/src/wallet');
const request = require('request-promise-native');
const promptly = require('promptly');
const cwc = require('crypto-wallet-core');
const libs = {
  BTC: cwc.BitcoreLib,
  BCH: cwc.BitcoreLibCash,
  DOGE: cwc.BitcoreLibDoge,
  LTC: cwc.BitcoreLibLtc
};

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>', 'REQUIRED - Wallet Name')
  .requiredOption('--payProUri <payProUri>', 'REQUIRED - payment protocol URI')
  .option('--nonce <nonce>', 'optional - Nonce')
  .option('--from <from>', 'optional - From account for XRP')
  .option('--token, <token>', 'optional - ERC-20 token to pay with')
  .option('--storageType <storageType>', 'optional - name of the database to use (Mongo | Level | TextFile)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

let wallet;

const main = async () => {
  const { name, path, token, nonce: inputNonce, from: inputFrom, storageType } = program.opts();
  let { payProUri } = program.opts();
  if (payProUri.includes(':?r=')) {
    const split = payProUri.split(':?r=');
    console.log(split.length);
    payProUri = split[split.length - 1];
  }
  // Payment-Options
  const paymentOptionsResponse = await doRequest({
    method: 'GET',
    uri: payProUri,
    headers: {
      'Accept' : 'application/payment-options',
      'x-paypro-version' : '2'
    },
    agentOptions: {
      rejectUnauthorized: false
    },
    json: true
  });
  let scaleMap = {};
  const { expires, memo, paymentOptions } = paymentOptionsResponse;
  const supportedCurrenciesArray = [];
  console.log(memo);
  console.log(`Payment expires at ${expires}`);
  paymentOptions.forEach((paymentOption, index) => {
    const { currency, network, estimatedAmount, requiredFeeRate, minerFee, decimals, selected } = paymentOption;
    supportedCurrenciesArray.push(currency);
    scaleMap[currency] = Math.pow(10, decimals);
    const amount = estimatedAmount / scaleMap[currency];
    console.log(`${index + 1}: ${amount} ${currency} (${network})`);
  });

  //  Payment-Request
  wallet = await Wallet.loadWallet({ name, path, storageType });
  const from = inputFrom || await wallet.deriveAddress(0);
  let nonce;
  const { chain } = wallet;
  if (!['BTC', 'BCH', 'DOGE', 'LTC'].includes(chain)) {
    nonce = inputNonce || await wallet.getNonce();
  }

  const currency = token || paymentOptions.find(o => o.chain === chain && o.native)?.currency;
  if (!currency) {
    throw new Error(`No supported currency for ${chain}. Try specifying --token`);
  }
  console.log(`selecting ${currency}`);
  const paymentRequestResponse = await doRequest({
    method: 'POST',
    uri: payProUri,
    json: { chain, currency },
    headers: {
      'Content-Type' : 'application/payment-request',
      'x-paypro-version' : '2'
    },
    agentOptions: {
      rejectUnauthorized: false
    },
  });

  // create transaction
  const { instructions } = paymentRequestResponse;
  console.log(JSON.stringify(instructions, null, 2));
  let unsignedTransactions = [];
  let signedTransactions = [];
  let password;
  for (const instruction of instructions) {
    const { type, requiredFeeRate, outputs, gasPrice, to, value, data } = instruction;
    const recipients = [{
      address: to || outputs[0].address,
      amount: value >= 0 ? value : outputs[0].amount
    }];
    const feeRate = requiredFeeRate || gasPrice;
    let invoiceID;
    if (outputs) {
      invoiceID = outputs[0].invoiceID;
    }
    const utxos = await wallet.getUtxosArray();
    const params = { recipients, feeRate, from, invoiceID, data, value, utxos, gasPrice };
    params.nonce = Number(nonce);
    params.change = !wallet.isUtxoChain() ? null : wallet.deriveAddress(wallet.addressIndex, true);
    const changeIdx = params.change ? wallet.addressIndex : null;
    const unsignedTx = await wallet.newTx(params);
    console.log(`unsignedRawTx: ${unsignedTx}`);

    //  Sign tx
    if (!password) {
      password = await promptly.password('Wallet Password:');
    }
    wallet = await wallet.unlock(password);
    const signedTx = await wallet.signTx({ tx: unsignedTx, passphrase: password, changeAddressIdx: changeIdx });
    const txid = cwc.Transactions.getHash({ chain, tx: signedTx });
    console.log(`signedRawTx: ${signedTx}`);
    signedTransactions.push({ tx: signedTx });
    console.log(`txid: ${txid}`);

    let weightedSize;
    if (['BTC', 'BCH', 'DOGE', 'LTC'].includes(chain)) {
      const transaction = new libs[chain].Transaction(signedTx);
      weightedSize = transaction._estimateSize();
    }
    unsignedTransactions.push({ tx: unsignedTx, weightedSize })
    nonce++;
  }

  // Payment Verification
  const paymentVerificationResponse = await doRequest({
    method: 'POST',
    uri: payProUri,
    json: { chain, currency, transactions: unsignedTransactions },
    headers: {
      'Content-Type' : 'application/payment-verification',
      'x-paypro-version' : '2'
    },
    agentOptions: {
      rejectUnauthorized: false
    },
  });
  console.log(paymentVerificationResponse);

  //  send-payment
  const sendPaymentResponse = await doRequest({
    method: 'POST',
    uri: payProUri,
    json: { chain, currency, transactions: signedTransactions },
    headers: {
      'Content-Type' : 'application/payment',
      'x-paypro-version' : '2'
    },
    agentOptions: {
      rejectUnauthorized: false
    },
  });
  console.log(sendPaymentResponse);
};

const doRequest = async (...opts) => {
  try {
    return await request(...opts);
  } catch (e) {
    throw new Error(e.stack || e.message || e);
  }
};

main()
  .catch(console.error)
  .finally(() => wallet?.storage?.close());
