#!/usr/bin/env node
'use strict';

const fs = require('fs');
const program = require('../ts_build/program');
const { Wallet } = require('../ts_build/wallet');
const promptly = require('promptly');
const { bitcoinCoreDecrypt } = require('../ts_build/encryption');

program
  .version(require('../package.json').version)
  .option('--name <name>', 'REQUIRED - Wallet Name')
  .option(
    '--parse [parse]',
    'OPTIONAL - A json string to parse in the form {"address": "mXy1234", "privKey": "xxxxxxx", "pubKey": "yyyyyyyy"}'
  )
  .option(
    '--file [file]',
    'OPTIONAL - A jsonl file with {"address": "mXy1234", "privKey": "xxxxxxx", "pubKey": "yyyyyyyy"} in it'
  )
  .option('--path [path]', 'optional - Custom wallet storage path')
  .option('--encrypted', 'optional - Bitcoin Core specific keys in which case we need to decrypt them before import')
  .option('--storageType [storageType]', 'optional - name of database (default Level)')
  .parse(process.argv);

const getFileKeys = file => {
  let contents = fs.readFileSync(file).toString();
  let fileKeys = contents
    .split('\n')
    .filter(line => line !== '')
    .map(line => JSON.parse(line));
  return fileKeys;
};

const parseKeys = keys => {
  let parsed = JSON.parse(keys);
  if (typeof parsed === 'object') {
    if (parsed instanceof Array === false) {
      return [parsed];
    } else {
      return parsed;
    }
  }
};

const main = async () => {
  const { name, path, file, parse, storageType } = program;
  let wallet;
  try {
    const password = await promptly.password('Wallet Password:');
    wallet = await Wallet.loadWallet({ name, path, storageType });
    wallet = await wallet.unlock(password);
    let keyInput = [];
    if (file) {
      keyInput = getFileKeys(file);
    } else if (parse) {
      keyInput = parseKeys(parse);
    }
    if (program.encrypted) {
      try {
        const bitcoinCorePassword = await promptly.password('Enter Bitcoin Core Password:');
        let decryptedParams = bitcoinCoreDecrypt(keyInput, bitcoinCorePassword);
        keyInput = decryptedParams.jsonlDecrypted;
      } catch (e) {
        console.error(e);
      }
    }
    await wallet.importKeys({ keys: keyInput });
    console.log(`${keyInput.length} Key(s) Imported`);
  } catch (e) {
    console.error(e);
  }
};

main();
