#!/usr/bin/env node

'use strict';

const program = require('commander');
const { Wallet } = require('../ts_build/src/wallet');
const { utils } = require('../ts_build/src/utils');
const promptly = require('promptly');
const { Web3 } = require('crypto-wallet-core');

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>',        'REQUIRED - Wallet Name')
  .requiredOption('--to <to>',            'REQUIRED - String address')
  .requiredOption('--amount <amount>',    'REQUIRED - Number amount (in btc/bch/eth/xrp). \'max\' to send all')
  .option('--token <tokenName>',          'Name of ERC-20 token to send')
  .option('--feeRate <rate>',             'Fee rate in sats/byte (UTXO), Gwei (EVM), or drops (XRP)')
  .option('--rbf',                        'Enable Replace-by-Fee')
  .option('--tag <tag>',                  'Destination tag (XRP only)')
  .option('--account <index>',            'EVM Account index to use (default 0)')
  .option('--storageType <storageType>',  'Name of the database to use (default Level)')
  .option('--path <path>',                'Custom wallet storage path')
  .parse(process.argv);

let wallet;

const main = async () => {
  const { name, path, to, amount, token: tokenName, storageType, rbf, tag, account = 0 } = program.opts();
  let { feeRate: feeRateParam } = program.opts();
  try {
    wallet = await Wallet.loadWallet({ name, path, storageType });
    const from = await wallet.deriveAddress(account); // only used for non-UTXO chains
    const chain = wallet.chain;
    const tokenObj = wallet.getTokenObj({ tokenName }); // null if no tokenName is provided
    const currencyObj = await utils.getCurrencyObj(chain, tokenObj?.address);
    const { decimals } = currencyObj;
    const scale = Math.pow(10, decimals);
    const recipients = [];
    const sendMax = amount === 'max';
    if (isNaN(amount) && !sendMax) {
      throw new Error('Amount must be a number or \'max\'');
    }
    if (!sendMax || !wallet.isUtxoChain()) {
      recipients.push({ address: to, amount: amount * scale });
    }
    const utxos = await wallet.getUtxosArray();
    const params = {
      utxos,
      recipients: [],
      from,
      tokenName,
      replaceByFee: rbf,
      tag,
      isSweep: sendMax
    };
    
    let feeRate = feeRateParam;
    if (!feeRate) {
      const feerate = await wallet.getNetworkFee();
      feeRate = feerate.feerate;
    }

    if (wallet.chain.toUpperCase() === 'XRP') {
      params.nonce = parseInt(await wallet.getNonce());
      params.fee = feeRateParam == null ? feeRate : parseInt(feeRateParam);
      console.log('Fee:', params.fee, 'drops'); // XRP doesn't really have a fee "rate"
    } else if (wallet.isUtxoChain()) {
      feeRate = feeRate ?? 1e-8; // default to 1 sat/byte in case wallet.getNetworkFee() returns null
      params.feeRate = Math.ceil(feeRateParam == null ? (feeRate * scale) : feeRateParam); // convert feeRate from BTC to sats/B
      console.log('Fee rate:', params.feeRate, 'sats/byte');
    } else {
      params.nonce = parseInt(await wallet.getNonce());
      params.feeRate = feeRateParam == null ? feeRate : parseInt(Web3.utils.toWei(feeRateParam.toString(), 'gwei')); // convert feeRateParam from Gwei to Wei
      console.log('Fee rate:', Web3.utils.fromWei(params.feeRate.toString(), 'Gwei'), 'Gwei');
    }

    if (!sendMax) {
      params.recipients.push({ address: to, amount: amount * scale });
    } else {
      // Send max amount
      if (wallet.isUtxoChain()) {
        params.change = to; // send all
      } else if (wallet.isEvmChain()) {
        const balance = await wallet.getBalance({ tokenName, address: from, hex: true });
        const tx = await wallet.newTx({ ...params, recipients: [{ address: to, amount: 1 }] }); // create dummy tx to estimate gas
        const { data } = wallet.getLib().ethers.utils.parseTransaction(tx);
        const gasLimit = await wallet.estimateGas({ to, from, data, value: BigInt(balance.confirmed).toString() });
        const l1FeeWei = await wallet.getL1Fee(tx); // OP-stack chains have a "hidden" layer-1 data fee (in wei). Returns 0 for non-OP-stack chains.
        const amtToSend = (BigInt(balance.confirmed) - (BigInt(gasLimit) * BigInt(params.feeRate)) - BigInt(l1FeeWei)).toString();
        params.recipients.push({ address: to, amount: amtToSend });
        params.gasLimit = gasLimit;
      } else if (wallet.chain.toUpperCase() === 'XRP') {
        const delWallet = await promptly.confirm('Would you like to send the reserve and delete your XRP wallet from the blockchain? (y/N)', { default: 'n' });
        if (delWallet) {
          const baseUrl = wallet.client.apiUrl;
          const tip = JSON.parse(await wallet.client._request({ url: baseUrl + '/block/tip', method: 'GET' }));
          if (params.nonce + 256 >= tip.height) {
            throw new Error(`Cannot delete wallet: wallet sequence needs to be at least 256 less than the current ledger index. Current sequence: ${sequence}, current ledger: ${tip.height}`);
          }
          params.recipients = [{ address: to, amount: null }];
          params.fee = 2 * scale; // 2 XRP fee for AccountDelete
          params.type = 'AccountDelete';
        } else {
          const balance = await wallet.getBalance();
          params.recipients = [{ address: to, amount: balance.confirmed }];
          console.log(`Sending ${balance.confirmed / scale} XRP to ${to}`);
        }
      } else {
        throw new Error(`sendMax not supported for ${wallet.chain}`);
      }
    }
    

    params.change = wallet.isUtxoChain() ? wallet.deriveAddress(wallet.addressIndex, true) : null;
    const changeIdx = params.change ? wallet.addressIndex : null;
    const tx = await wallet.newTx(params);
    console.log('UnsignedRawTx: ', tx);
    const passphrase = await promptly.password('Wallet Password:');
    wallet = await wallet.unlock(passphrase);
    const signedTx = await wallet.signTx({ tx, passphrase, changeAddressIdx: changeIdx });
    console.log('SignedRawTx: ', signedTx);
    const broadcast = await promptly.confirm('Broadcast? (y/n)');
    if (!broadcast) {
      return;
    }
    const transaction = await wallet.broadcast({ tx: signedTx });
    console.log('Txid: ', transaction.txid);
    console.log('Transaction broadcasted');
  } catch (e) {
    console.error(e);
  }
};


main()
  .catch(console.error)
  .finally(() => wallet?.storage?.close());
