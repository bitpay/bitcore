#!/usr/bin/env node

var _ = require('lodash');
const request = require('request');
const Bitcore = require('bitcore-lib');
const requestStream = require('request');
const Client = require('../lib/blockchainexplorers/v8/client.js');


const coin = 'BTC';
console.log('[v8tool-list.10:coin:]',coin); //TODO
const network = 'mainnet';
const authKey = process.argv[2]; 

if (!authKey) 
  throw "provide authKey"


// ====================
//
const authKeyObj =  Bitcore.PrivateKey(authKey);

let tmp  = authKeyObj.toObject();
tmp.compressed = false;
const pubKey = Bitcore.PrivateKey(tmp).toPublicKey() ;

//console.log(pubKey); 

const baseUrl = `https://api.bitcore.io/api/${coin}/${network}`;
let client = new Client({
  baseUrl: baseUrl,
  authKey: authKeyObj,
});

// utxos
// addresses

//const url = `${baseUrl}/wallet/${pubKey}/${path}`;
const url = `${baseUrl}/wallet/${pubKey}/transactions?startBlock=0&includeMempool=true`;
console.log('[v8tool.37:url:]',url); //TODO
const signature = client.sign({ method: 'GET', url });
const payload = {};
var acum = '';


let r= requestStream.get(url, {
  headers: { 'x-signature': signature },
  json: true
});

r.on('data', (raw) => {
  acum = acum + raw.toString();
});

r.on('end', () => {
  let txs = [], unconf= [], err;
  _.each(acum.split(/\r?\n/), (rawTx) => {
    if (!rawTx)
    return;

    let tx;
    try {
      tx = JSON.parse(rawTx);
    } catch (e) {
      log.error('v8 error at JSON.parse:' + e  + ' Parsing:' + rawTx + ":");
      return cb(e);
    }
    // v8 field name differences
    if (tx.value)
    tx.amount = tx.satoshis / 1e8;

    if (tx.height>=0)
      txs.push(tx);
    else 
    unconf.push(tx);
  });
  console.log('txs', _.flatten(_.orderBy(unconf,'blockTime', 'desc').concat(txs.reverse())));
});

